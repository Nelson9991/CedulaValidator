@page "/"
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory

<PageTitle>Validador de Cédula</PageTitle>

<h1 class="text-primary">Validador de Cédula</h1>

<EditForm FormName="form-cedula"
          Model="@Model" method="post"
          OnValidSubmit="ValidateCedula">
  <DataAnnotationsValidator />
  <StatusMessage Message="@errorMessage" />
  <div class="py-2">
    <div class="form-group mb-2">
      <label for="cedula">Cédula</label>
      <InputText class="form-control" @bind-Value="Model.Cedula" />
      <ValidationMessage For="() => Model.Cedula" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-success"
            disabled="@isBusy">
      @(isBusy ? "Cargando..." : "Validar")
    </button>
  </div>
</EditForm>

@if (cedulaResponse is not null)
{
  <div class="row my-2">
    <table class="table table-striped table-hover">
      <thead>
        <tr>
          <th>Nombre Completo</th>
          <th>Identificación</th>
          <th>RUC</th>
          <th>Razón Social</th>
          <th>Estado Contribuyente</th>
          <th>Tipo Contribuyente</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>@cedulaResponse.Data!.Response.NombreCompleto</td>
          <td>@cedulaResponse.Data!.Response.Identificacion</td>
          <td>@(rucResponse?.Data?.Main[0].NumeroRuc ?? "N/A")</td>
          <td>@(rucResponse?.Data?.Main[0].RazonSocial ?? "N/A")</td>
          <td>@(rucResponse?.Data?.Main[0].EstadoContribuyenteRuc ?? "N/A")</td>
          <td>@(rucResponse?.Data?.Main[0].TipoContribuyente ?? "N/A")</td>
        </tr>
      </tbody>
    </table>
  </div>

  <a class="btn btn-outline-dark" target="_blank" href=@($"https://localhost:7152/api/licencia/consultar?Cedula={@cedulaResponse.Data!.Response.Identificacion}&Matricula=T")>
    Consultar Estado Licencia
  </a>
}

@code {
  private string? errorMessage;
  private CedulaResponseDto? cedulaResponse;
  private RucResponseDto? rucResponse;
  private bool isBusy;

  public CedulaRequestDto Model { get; set; } = new();

  private static bool ValidarCedulaEcuatoriana(string cedula)
  {
    if (cedula.Length != 10)
    {
      return false;
    }

    int suma = 0;
    int digito;

    for (int i = 0; i < 9; i++)
    {
      digito = Convert.ToInt32(cedula[i].ToString());

      if (i % 2 == 0)
      {
        digito = digito * 2;
        if (digito > 9)
        {
          digito = digito - 9;
        }
      }

      suma += digito;
    }

    int ultimoDigito = Convert.ToInt32(cedula[9].ToString());
    int digitoVerificador = suma % 10 == 0 ? 0 : 10 - suma % 10;

    return ultimoDigito == digitoVerificador;
  }

  private async void ValidateCedula()
  {
    try
    {
      errorMessage = string.Empty;

      isBusy = true;
      if (!ValidarCedulaEcuatoriana(Model.Cedula))
      {
        errorMessage = "Error: La Cédula no es válida";
        isBusy = false;
        return;
      }

      using var cedulaClient = HttpClientFactory.CreateClient(AppConstants.CEDULA_SERVICE_CLIENT);
      using var rucClient = HttpClientFactory.CreateClient(AppConstants.RUC_SERVICE_CLIENT);

      var cedResp = await cedulaClient.GetAsync($"{Model.Cedula}");
      var rucResp = await rucClient.GetAsync($"{Model.Cedula}001");

      if (!cedResp.IsSuccessStatusCode)
      {
        var errorResponse = await cedResp.Content.ReadFromJsonAsync<ErrorResponseDto>();
        errorMessage = $"Error: {errorResponse!.Data!.Error}";
        isBusy = false;
        StateHasChanged();
        return;
      }

      if (!rucResp.IsSuccessStatusCode)
      {
        var errorResponse = await rucResp.Content.ReadFromJsonAsync<ErrorResponseDto>();
        errorMessage = $"Warning: {errorResponse?.Data?.Error ?? ""}";
      }
      else
      {
        rucResponse = await rucResp.Content.ReadFromJsonAsync<RucResponseDto>();
      }

      cedulaResponse = await cedResp.Content.ReadFromJsonAsync<CedulaResponseDto>();
      isBusy = false;
      StateHasChanged();
    }
    catch (Exception ex)
    {
      throw;
    }
  }
}